/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Dao.BookingInterface;
import Dao.BookingRes;
import Dao.GenericDao;
import Model.AvailableStatus;
import Model.Booking;
import Model.Customer;
import Model.Room;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alvaro
 */
public class BookingView extends javax.swing.JInternalFrame {
    GenericDao<Booking> bookingDao = new GenericDao<>(Booking.class);
    GenericDao<Room> roomDao = new GenericDao<>(Room.class);
    GenericDao<Customer> customerDao = new GenericDao<>(Customer.class);
    
    BookingInterface bki = new BookingRes();
    Booking booking = new Booking();
    Room room = new Room();
    Customer customer = new Customer();
    
    DefaultTableModel transTable;
    
    public BookingView() {
        initComponents();
        transTable=(DefaultTableModel)TransactionTable.getModel();
//        AllTransaction();
        allTransactionType();
        allCustomer();
        allRoom();
        
    }
    public void allAvailable(){
      List<Booking> lib=(List<Booking>) bookingDao.findAllAvailable();
      transTable.setRowCount(0);
      
      lib.forEach((x)->{
      transTable.insertRow(transTable.getRowCount(), new Object[]{x.getId(),x.getCustomer(),x.getRoom().getRoomid(),x.getStartDate(),x.getEndDate(),x.getStatus()});
      });
    }
    public void allOccupied(){
      List<Booking> li=(List<Booking>) bookingDao.findAllOccupied();
      transTable.setRowCount(0);
      
      li.forEach((x)->{
      transTable.insertRow(transTable.getRowCount(), new Object[]{x.getId(),x.getCustomer().getFirstname(),x.getRoom().getRoomid(),x.getStartDate(),x.getEndDate(),x.getStatus()});
      });
    }
    
    public void allTransactionType(){
      AvailableStatus types[]=AvailableStatus.values();
      transactiontypecombo.removeAllItems();
      for(AvailableStatus tt:types){
        transactiontypecombo.addItem(tt.toString());
      }
    }
    public void allCustomer(){
      List<Customer> lic=(List<Customer>) customerDao.findAll();
      clientcombo.removeAllItems();
      lic.forEach((x)->{
      clientcombo.addItem(x.getFirstname()+" "+x.getLastname());
       });
    }
    public void allRoom(){
      List<Room> lib=(List<Room>) roomDao.findAll();
      roomcombo.removeAllItems();
      lib.forEach((x)->{
        roomcombo.addItem(x.getRoomid());
      });
    }
//    public void AllTransaction(){
//      List<Booking> trali=(List<Booking>)bookingDao.findAll();
//      
//      transTable.setRowCount(0);
//      
//      trali.forEach((x)->{
//      transTable.insertRow(transTable.getRowCount(), new Object[]{x.getId(),x.getCustomer().getCustomerid(),x.getRoom().getRoomid(),x.getStartDate(),x.getEndDate(),x.getStatus()});
//      });
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        roomcombo = new javax.swing.JComboBox<>();
        clientcombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        transactiontypecombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TransactionTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        sDate = new com.toedter.calendar.JDateChooser();
        eDate = new com.toedter.calendar.JDateChooser();
        save = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        jLabel3.setText("Starting Date");

        roomcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomcomboActionPerformed(evt);
            }
        });

        clientcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientcomboActionPerformed(evt);
            }
        });

        jLabel4.setText("Ending Date");

        jLabel5.setText("Transaction type");

        jLabel1.setText("ClientName");

        jLabel2.setText("Room");

        TransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Customer", "ROOM", "Starting date", "Ending date", "Status"
            }
        ));
        TransactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TransactionTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TransactionTable);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel6.setText("Booking Reservation");

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        update.setText("Update");

        delete.setText("Delete");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(272, 272, 272)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(save)
                        .addGap(49, 49, 49)
                        .addComponent(update)
                        .addGap(75, 75, 75)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transactiontypecombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(roomcombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clientcombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sDate, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(eDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clientcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(transactiontypecombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(eDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delete)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(update)
                                .addComponent(save))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomcomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomcomboActionPerformed

    private void clientcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientcomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientcomboActionPerformed

    private void TransactionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TransactionTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TransactionTableMouseClicked

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        try{
            Date td=sDate.getDate();
            Date d=eDate.getDate();
            SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
            DateTimeFormatter formatter=DateTimeFormatter.ofPattern("dd/MM/yyyy");
            
            AvailableStatus typ = AvailableStatus.valueOf(transactiontypecombo.getSelectedItem().toString());
            
            if(typ.equals(AvailableStatus.OCCUPIED)){
              bki.occupiedRoom(roomcombo.getSelectedItem().toString(), LocalDate.parse(sdf.format(td), formatter),  LocalDate.parse(sdf.format(d), formatter));
              JOptionPane.showMessageDialog(null, "Room is Occupied");
//              AllTransaction();
              allTransactionType();
              allOccupied();
            }
            if(typ.equals(AvailableStatus.AVAILABLE)){
              bki.availableRoom(roomcombo.getSelectedItem().toString());
              JOptionPane.showMessageDialog(null, "Room is Available");
//              AllTransaction();
              allTransactionType();
              allAvailable();
            }
            
        }catch(Exception ex){
        JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TransactionTable;
    private javax.swing.JComboBox<String> clientcombo;
    private javax.swing.JButton delete;
    private com.toedter.calendar.JDateChooser eDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> roomcombo;
    private com.toedter.calendar.JDateChooser sDate;
    private javax.swing.JButton save;
    private javax.swing.JComboBox<String> transactiontypecombo;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
